#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.16
# from Racc grammar file "".
#

require 'racc/parser.rb'
module Rsql
  class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    10,    10,    17,    20,    14,    20,    11,    11,    19,    30,
    19,    24,    25,    20,    23,     5,    24,    25,    19,    23,
    24,    25,     4,    23,    24,    25,    12,    23,     7,    29,
    16,    15 ]

racc_action_check = [
     4,    16,    13,    14,     6,    22,     4,    16,    14,    27,
    22,    27,    27,    20,    27,     1,    28,    28,    20,    28,
    18,    18,     0,    18,    19,    19,     5,    19,     3,    26,
     8,     7 ]

racc_action_pointer = [
    20,    15,   nil,    25,   -15,    26,     0,    10,     3,   nil,
   nil,   nil,   nil,   -21,   -13,   nil,   -14,   nil,     1,     5,
    -3,   nil,   -11,   nil,   nil,   nil,     8,    -8,    -3,   nil,
   nil ]

racc_action_default = [
   -17,   -17,    -1,   -17,   -12,   -17,   -17,   -17,    -3,   -13,
   -15,   -16,    31,   -17,   -17,    -4,   -17,    -2,    -5,   -17,
   -17,   -14,   -17,    -9,   -10,   -11,   -17,   -17,    -7,    -6,
    -8 ]

racc_goto_table = [
     9,    18,     3,     6,     1,     8,    26,    27,    13,    28,
     2,   nil,    21 ]

racc_goto_check = [
     9,     7,     3,     4,     1,     6,     8,     7,     5,     7,
     2,   nil,     9 ]

racc_goto_pointer = [
   nil,     4,    10,     2,     0,     2,     1,   -13,   -13,    -4 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 29, :_reduce_none,
  4, 30, :_reduce_2,
  2, 31, :_reduce_3,
  2, 32, :_reduce_4,
  2, 33, :_reduce_5,
  3, 35, :_reduce_6,
  3, 35, :_reduce_7,
  3, 35, :_reduce_8,
  1, 36, :_reduce_9,
  1, 36, :_reduce_10,
  1, 36, :_reduce_11,
  0, 34, :_reduce_none,
  1, 34, :_reduce_none,
  3, 34, :_reduce_14,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none ]

racc_reduce_n = 17

racc_shift_n = 31

racc_token_table = {
  false => 0,
  :error => 1,
  :kw_select => 2,
  :kw_from => 3,
  :kw_where => 4,
  :kw_null => 5,
  :kw_not => 6,
  :kw_insert => 7,
  :kw_into => 8,
  :kw_values => 9,
  :kw_create => 10,
  :kw_table => 11,
  :kw_constraint => 12,
  :kw_key => 13,
  :kw_primary => 14,
  :star => 15,
  :lparen => 16,
  :rparen => 17,
  :ws => 18,
  :op_or => 19,
  :op_and => 20,
  :identifier => 21,
  :op_equal => 22,
  :semicolon => 23,
  :comma => 24,
  :integer => 25,
  :string => 26,
  "," => 27 }

racc_nt_base = 28

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kw_select",
  "kw_from",
  "kw_where",
  "kw_null",
  "kw_not",
  "kw_insert",
  "kw_into",
  "kw_values",
  "kw_create",
  "kw_table",
  "kw_constraint",
  "kw_key",
  "kw_primary",
  "star",
  "lparen",
  "rparen",
  "ws",
  "op_or",
  "op_and",
  "identifier",
  "op_equal",
  "semicolon",
  "comma",
  "integer",
  "string",
  "\",\"",
  "$start",
  "statement",
  "query",
  "select_stmt",
  "from_stmt",
  "where_stmt",
  "collection",
  "predicate",
  "binary_operator",
  "atom" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_2(val, _values, result)
     result = val[0..-2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 9)
  def _reduce_3(val, _values, result)
     result = [:select, val[1]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_4(val, _values, result)
     result = [:from, val[1]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_5(val, _values, result)
     result = [:where, val[1]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_6(val, _values, result)
     result = [val[1], [ val[0], val[2] ]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 15)
  def _reduce_7(val, _values, result)
     result = [val[1], [ val[0], val[2] ]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_8(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_9(val, _values, result)
     result = :'='
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_10(val, _values, result)
     result = :or
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_11(val, _values, result)
     result = :and
    result
  end
.,.,

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_14(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

# reduce 15 omitted

# reduce 16 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module Rsql
