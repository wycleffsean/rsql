#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.3
# from Racc grammar file "parser.y".
#

require 'racc/parser.rb'
module Rsql
  class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    18,     9,    18,    40,    18,    21,    22,    10,     7,    11,
    23,     6,    23,    12,    23,    21,    22,    21,    22,    21,
    22,    18,    40,    18,    40,    18,    21,    22,    13,    15,
    24,    23,    64,    23,    70,    23,    21,    22,    21,    22,
    21,    22,    82,    65,    23,    71,     9,    23,    29,    23,
    31,    32,    33,    83,    75,    48,    56,    57,    58,    60,
    61,    59,    35,    55,    56,    57,    58,    60,    61,    59,
    37,    55,    56,    57,    58,    60,    61,    59,    23,    55,
    56,    57,    58,    60,    61,    59,    23,    55,    23,    52,
    53,    23,    69,    72,    23,    77,    23,    69 ]

racc_action_check = [
     9,     0,    29,    29,    31,    69,    69,     1,     0,     2,
     9,     0,    29,     6,    31,     9,     9,    29,    29,    31,
    31,    40,    40,    54,    54,    62,    83,    83,     7,     8,
    10,    40,    42,    54,    49,    62,    40,    40,    54,    54,
    62,    62,    78,    42,    12,    49,    34,    13,    14,    15,
    16,    25,    26,    78,    63,    34,    63,    63,    63,    63,
    63,    63,    27,    63,    38,    38,    38,    38,    38,    38,
    28,    38,    39,    39,    39,    39,    39,    39,    32,    39,
    73,    73,    73,    73,    73,    73,    33,    73,    35,    36,
    37,    44,    48,    52,    65,    67,    71,    77 ]

racc_action_pointer = [
    -1,     7,   -20,   nil,   nil,   nil,     0,    18,    26,   -17,
    30,   nil,    17,    20,    44,    22,    20,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    33,    21,    44,    63,   -15,
   nil,   -13,    51,    59,    44,    61,    81,    58,    43,    51,
     4,   nil,    13,   nil,    64,   nil,   nil,   nil,    74,    15,
   nil,   nil,    61,   nil,     6,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     8,    35,   nil,    67,   nil,    65,   nil,   -27,
   nil,    69,   nil,    59,   nil,   nil,   nil,    79,    23,   nil,
   nil,   nil,   nil,    -6,   nil ]

racc_action_default = [
   -54,   -54,   -54,    -2,    -3,    -4,   -54,   -54,   -54,   -39,
   -54,    -1,   -54,   -54,   -23,   -54,   -19,   -40,   -48,   -49,
   -50,   -51,   -52,   -53,    85,   -54,   -22,   -10,   -25,   -54,
   -20,   -54,   -54,   -54,   -54,   -42,   -27,   -54,   -24,   -54,
   -54,   -41,   -54,    -6,   -54,   -21,    -9,   -12,   -14,   -54,
   -43,   -18,   -54,   -26,   -54,   -32,   -33,   -34,   -35,   -36,
   -37,   -38,   -54,   -54,    -5,   -54,    -8,   -13,   -15,   -45,
   -11,   -54,   -28,   -30,   -29,   -31,    -7,   -54,   -54,   -46,
   -44,   -16,   -17,   -54,   -47 ]

racc_goto_table = [
    26,    26,    17,    26,     3,    68,    43,     1,    38,    25,
    27,    79,    30,     2,     4,     5,    42,    34,    46,    63,
    44,    45,    49,    50,    41,    84,    67,    78,    14,    28,
    36,    51,    66,    73,    81,    16,    62,   nil,    47,    76,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    44,   nil,    74,   nil,   nil,   nil,    80 ]

racc_goto_check = [
     9,     9,    23,     9,     3,    14,     8,     1,    22,     6,
     6,    25,     6,     2,     4,     5,     7,    10,    11,    22,
     9,     9,    12,     9,    23,    25,    13,    15,    17,    18,
    19,    20,     9,    22,    14,    21,    24,   nil,     3,     8,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     9,   nil,    23,   nil,   nil,   nil,     9 ]

racc_goto_pointer = [
   nil,     7,    13,     4,    14,    15,    -3,   -16,   -26,   -12,
   -10,   -16,   -13,   -22,   -43,   -42,   nil,    20,    15,     2,
    -5,    26,   -21,    -7,    -3,   -58 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,
   nil,   nil,   nil,   nil,   nil,   nil,     8,   nil,   nil,   nil,
   nil,   nil,   nil,    39,    54,    20 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 35, :_reduce_1,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  6, 38, :_reduce_5,
  1, 41, :_reduce_6,
  3, 41, :_reduce_7,
  2, 42, :_reduce_8,
  5, 39, :_reduce_9,
  0, 44, :_reduce_10,
  3, 44, :_reduce_11,
  1, 45, :_reduce_12,
  2, 45, :_reduce_13,
  0, 47, :_reduce_none,
  1, 47, :_reduce_15,
  3, 47, :_reduce_16,
  3, 48, :_reduce_17,
  5, 37, :_reduce_18,
  2, 50, :_reduce_19,
  2, 51, :_reduce_20,
  3, 40, :_reduce_21,
  1, 40, :_reduce_22,
  0, 52, :_reduce_none,
  2, 52, :_reduce_24,
  0, 53, :_reduce_none,
  2, 53, :_reduce_26,
  0, 54, :_reduce_none,
  2, 54, :_reduce_28,
  3, 56, :_reduce_29,
  3, 56, :_reduce_30,
  3, 56, :_reduce_31,
  1, 58, :_reduce_32,
  1, 58, :_reduce_33,
  1, 58, :_reduce_34,
  1, 58, :_reduce_35,
  1, 58, :_reduce_36,
  1, 58, :_reduce_37,
  1, 58, :_reduce_38,
  0, 55, :_reduce_none,
  1, 55, :_reduce_40,
  3, 55, :_reduce_41,
  0, 46, :_reduce_none,
  1, 46, :_reduce_43,
  3, 46, :_reduce_44,
  0, 49, :_reduce_none,
  1, 49, :_reduce_46,
  3, 49, :_reduce_47,
  1, 57, :_reduce_48,
  1, 57, :_reduce_none,
  1, 57, :_reduce_none,
  1, 59, :_reduce_none,
  1, 59, :_reduce_none,
  1, 43, :_reduce_53 ]

racc_reduce_n = 54

racc_shift_n = 85

racc_token_table = {
  false => 0,
  :error => 1,
  :kw_select => 2,
  :kw_from => 3,
  :kw_where => 4,
  :kw_null => 5,
  :kw_not => 6,
  :kw_limit => 7,
  :kw_offset => 8,
  :kw_insert => 9,
  :kw_into => 10,
  :kw_values => 11,
  :kw_create => 12,
  :kw_table => 13,
  :kw_constraint => 14,
  :kw_key => 15,
  :kw_primary => 16,
  :star => 17,
  :lparen => 18,
  :rparen => 19,
  :ws => 20,
  :op_or => 21,
  :op_and => 22,
  :op_lt => 23,
  :op_gt => 24,
  :op_gte => 25,
  :op_lte => 26,
  :identifier => 27,
  :op_equal => 28,
  :semicolon => 29,
  :comma => 30,
  :period => 31,
  :integer => 32,
  :string => 33 }

racc_nt_base = 34

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "kw_select",
  "kw_from",
  "kw_where",
  "kw_null",
  "kw_not",
  "kw_limit",
  "kw_offset",
  "kw_insert",
  "kw_into",
  "kw_values",
  "kw_create",
  "kw_table",
  "kw_constraint",
  "kw_key",
  "kw_primary",
  "star",
  "lparen",
  "rparen",
  "ws",
  "op_or",
  "op_and",
  "op_lt",
  "op_gt",
  "op_gte",
  "op_lte",
  "identifier",
  "op_equal",
  "semicolon",
  "comma",
  "period",
  "integer",
  "string",
  "$start",
  "statement",
  "query",
  "select_query",
  "create_table_query",
  "insert_into_query",
  "relation",
  "column_definitions",
  "column_definition",
  "symbol",
  "insert_columns",
  "insert_data",
  "symbol_collection",
  "values_collection",
  "values",
  "literal_collection",
  "select_expr",
  "from_expr",
  "where_expr",
  "limit_expr",
  "offset_expr",
  "collection",
  "predicate",
  "atom",
  "binary_operator",
  "literal" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_1(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_5(val, _values, result)
     result = [:create_table, val[2].merge(columns: val[4]) ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_6(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 45)
  def _reduce_7(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 46)
  def _reduce_8(val, _values, result)
     result = [val[0], val[1]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 47)
  def _reduce_9(val, _values, result)
     result = [:insert_into_query, val.values_at(2, 3, 4).compact.reduce(&:merge)]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_10(val, _values, result)
     {}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_11(val, _values, result)
     result = { column_names: val[1] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_12(val, _values, result)
     result = Hash[val]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_13(val, _values, result)
     result = { rows: val[1] }
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_15(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_16(val, _values, result)
     result = val[0] + [val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_17(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_18(val, _values, result)
     result = [:select_query, val.values_at(1, 2, 4, 3, 0).compact]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_19(val, _values, result)
     result = [:select, val[1]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_20(val, _values, result)
     result = [:from, val[1]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_21(val, _values, result)
     result = { schema_name: val[0], table_name: val[2] }
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_22(val, _values, result)
     result = { table_name: val[0].to_sym }
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_24(val, _values, result)
     result = [:where, val[1]]
    result
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_26(val, _values, result)
     result = [:limit, [val[1]]]
    result
  end
.,.,

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_28(val, _values, result)
     result = [:offset, [val[1]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 68)
  def _reduce_29(val, _values, result)
     result = [val[1], [ val[0], val[2] ]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_30(val, _values, result)
     result = [val[1], [ val[0], val[2] ]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_31(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 72)
  def _reduce_32(val, _values, result)
     result = :'=='
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 73)
  def _reduce_33(val, _values, result)
     result = :or
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_34(val, _values, result)
     result = :and
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_35(val, _values, result)
     result = :<
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 76)
  def _reduce_36(val, _values, result)
     result = :<=
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 77)
  def _reduce_37(val, _values, result)
     result = :>
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 78)
  def _reduce_38(val, _values, result)
     result = :>=
    result
  end
.,.,

# reduce 39 omitted

module_eval(<<'.,.,', 'parser.y', 80)
  def _reduce_40(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 81)
  def _reduce_41(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_43(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_44(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.y', 86)
  def _reduce_46(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 87)
  def _reduce_47(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_48(val, _values, result)
     result = val[0].to_sym
    result
  end
.,.,

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_53(val, _values, result)
     result = val[0].downcase.to_sym
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module Rsql
