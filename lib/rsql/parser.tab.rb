#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.16
# from Racc grammar file "".
#

require 'racc/parser.rb'
module Rsql
  class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    10,    21,    10,    10,    17,    10,    21,     5,    10,    21,
    11,    10,    11,    11,    12,    11,    12,    12,    11,    12,
     4,    11,    12,    15,    35,    12,    25,    26,    27,    28,
    29,    30,    13,    24,    25,    26,    27,    28,    29,    30,
     7,    24,    25,    26,    27,    28,    29,    30,    18,    24,
    25,    26,    27,    28,    29,    30,    16,    24 ]

racc_action_check = [
    15,    15,    31,     4,     8,    23,    23,     1,    21,    21,
    15,    17,    31,     4,    15,    23,    31,     4,    21,    23,
     0,    17,    21,     6,    32,    17,    32,    32,    32,    32,
    32,    32,     5,    32,    33,    33,    33,    33,    33,    33,
     3,    33,    19,    19,    19,    19,    19,    19,    14,    19,
    20,    20,    20,    20,    20,    20,     7,    20 ]

racc_action_pointer = [
    18,     7,   nil,    37,   -12,    32,    19,    31,   -24,   nil,
   nil,   nil,   nil,   nil,    21,   -15,   nil,    -4,   nil,    23,
    31,    -7,   nil,   -10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -13,     7,    15,   nil,   nil ]

racc_action_default = [
   -22,   -22,    -1,   -22,   -16,   -22,   -22,   -22,    -3,   -17,
   -19,   -20,   -21,    36,   -22,   -22,    -4,   -22,    -2,    -5,
   -22,   -22,   -18,   -22,    -9,   -10,   -11,   -12,   -13,   -14,
   -15,   -22,   -22,    -7,    -6,    -8 ]

racc_goto_table = [
     9,    19,     3,     6,    14,     8,     1,    32,    31,    33,
     2,   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    34 ]

racc_goto_check = [
     8,     7,     3,     4,     5,     6,     1,     7,     9,     7,
     2,   nil,   nil,     8,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8 ]

racc_goto_pointer = [
   nil,     6,    10,     2,     0,    -2,     1,   -14,    -4,   -12 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    20,    23 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 32, :_reduce_none,
  4, 33, :_reduce_2,
  2, 34, :_reduce_3,
  2, 35, :_reduce_4,
  2, 36, :_reduce_5,
  3, 38, :_reduce_6,
  3, 38, :_reduce_7,
  3, 38, :_reduce_8,
  1, 40, :_reduce_9,
  1, 40, :_reduce_10,
  1, 40, :_reduce_11,
  1, 40, :_reduce_12,
  1, 40, :_reduce_13,
  1, 40, :_reduce_14,
  1, 40, :_reduce_15,
  0, 37, :_reduce_none,
  1, 37, :_reduce_17,
  3, 37, :_reduce_18,
  1, 39, :_reduce_19,
  1, 39, :_reduce_20,
  1, 39, :_reduce_none ]

racc_reduce_n = 22

racc_shift_n = 36

racc_token_table = {
  false => 0,
  :error => 1,
  :kw_select => 2,
  :kw_from => 3,
  :kw_where => 4,
  :kw_null => 5,
  :kw_not => 6,
  :kw_insert => 7,
  :kw_into => 8,
  :kw_values => 9,
  :kw_create => 10,
  :kw_table => 11,
  :kw_constraint => 12,
  :kw_key => 13,
  :kw_primary => 14,
  :star => 15,
  :lparen => 16,
  :rparen => 17,
  :ws => 18,
  :op_or => 19,
  :op_and => 20,
  :op_lt => 21,
  :op_gt => 22,
  :op_gte => 23,
  :op_lte => 24,
  :identifier => 25,
  :op_equal => 26,
  :semicolon => 27,
  :comma => 28,
  :integer => 29,
  :string => 30 }

racc_nt_base = 31

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kw_select",
  "kw_from",
  "kw_where",
  "kw_null",
  "kw_not",
  "kw_insert",
  "kw_into",
  "kw_values",
  "kw_create",
  "kw_table",
  "kw_constraint",
  "kw_key",
  "kw_primary",
  "star",
  "lparen",
  "rparen",
  "ws",
  "op_or",
  "op_and",
  "op_lt",
  "op_gt",
  "op_gte",
  "op_lte",
  "identifier",
  "op_equal",
  "semicolon",
  "comma",
  "integer",
  "string",
  "$start",
  "statement",
  "query",
  "select_stmt",
  "from_stmt",
  "where_stmt",
  "collection",
  "predicate",
  "atom",
  "binary_operator" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_2(val, _values, result)
     result = [:query, [val[1], val[2], val[0]]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_3(val, _values, result)
     result = [:select, val[1]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_4(val, _values, result)
     result = [:from, val[1].to_sym]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_5(val, _values, result)
     result = [:where, val[1]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_6(val, _values, result)
     result = [val[1], [ val[0], val[2] ]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_7(val, _values, result)
     result = [val[1], [ val[0], val[2] ]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_8(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_9(val, _values, result)
     result = :'=='
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 45)
  def _reduce_10(val, _values, result)
     result = :or
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 46)
  def _reduce_11(val, _values, result)
     result = :and
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 47)
  def _reduce_12(val, _values, result)
     result = :<
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_13(val, _values, result)
     result = :>
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_14(val, _values, result)
     result = :<=
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 50)
  def _reduce_15(val, _values, result)
     result = :>=
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_17(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_18(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_19(val, _values, result)
     result = val[0].to_sym
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_20(val, _values, result)
     result = val[0].to_sym
    result
  end
.,.,

# reduce 21 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module Rsql
